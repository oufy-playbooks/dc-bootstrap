- name: Deploy openssl packages
  yum:
    name:
      - 'openssl'
      - 'pyOpenSSL'
    state: latest


- name: create skeleton folders
  file:
    state: directory
    owner: root
    group: root
    mode: 0700
    path: "{{ item }}"
  with_items:
    - "{{ cert_authorities.root.path }}"
    - "{{ cert_authorities.root.path }}/certs"
    - "{{ cert_authorities.root.path }}/bin"
    - "{{ cert_authorities.root.path }}/private"
    - "{{ cert_authorities.root.path }}/crl"
    - "{{ cert_authorities.root.path }}/requests"
    - "{{ cert_authorities.root.path }}/newcerts"
    - "{{ cert_authorities.servers.path }}"
    - "{{ cert_authorities.servers.path }}/certs"
    - "{{ cert_authorities.servers.path }}/bin"
    - "{{ cert_authorities.servers.path }}/private"
    - "{{ cert_authorities.servers.path }}/crl"
    - "{{ cert_authorities.servers.path }}/requests"
    - "{{ cert_authorities.servers.path }}/newcerts"
    - "{{ cert_authorities.users.path }}"
    - "{{ cert_authorities.users.path }}/certs"
    - "{{ cert_authorities.users.path }}/bin"
    - "{{ cert_authorities.users.path }}/private"
    - "{{ cert_authorities.users.path }}/crl"
    - "{{ cert_authorities.users.path }}/requests"
    - "{{ cert_authorities.users.path }}/newcerts"

- name: create root CA key
  openssl_privatekey:
    cipher: "{{ cert_authorities.root.ca_key_cipher }}"
    passphrase: "{{ cert_authorities.root.ca_key_passphrase }}"
    group: root
    owner: root
    mode: 0600
    path: "{{ cert_authorities.root.path }}/private/{{ cert_authorities.root.name }}.pem"
    size: 4096
    state: present
    type: RSA
  register: root_ca_private_key

- name: initialize root CA index
  file:
    state: touch
    path: "{{ cert_authorities.root.path }}/index.txt"
    owner: root
    group: root
    mode: 0600
  when: root_ca_private_key.changed
- name: initialize root CA serial counter
  template:
    dest: "{{ cert_authorities.root.path }}/serial"
    owner: root
    group: root
    mode: 0600
    src: "../templates/pki/serial"
  when: root_ca_private_key.changed
- name: initialize root CA crlnumber
  template:
    dest: "{{ cert_authorities.root.path }}/crlnumber"
    owner: root
    group: root
    mode: 0600
    src: "../templates/pki/crlnumber"
  when: root_ca_private_key.changed
- name: configure root CA openssl
  template:
    dest: "{{ cert_authorities.root.path }}/openssl.cnf"
    owner: root
    group: root
    mode: 0600
    src: "../templates/pki/rootca_openssl.cnf.j2"
- name: check root CA cacert existence
  stat:
    path: "{{ cert_authorities.root.path }}/certs/{{ cert_authorities.root.name }}.crt"
  register: root_ca_cert_file
- name: generate root CA csr
  shell: "openssl req -new -config {{ cert_authorities.root.path }}/openssl.cnf -out {{ cert_authorities.root.path }}/requests/{{ cert_authorities.root.name }}.csr.pem -key {{ cert_authorities.root.path }}/private/{{ cert_authorities.root.name }}.pem -passin pass:{{ cert_authorities.root.ca_key_passphrase }} -batch"
  args:
    creates: "{{ cert_authorities.root.path }}/requests/{{ cert_authorities.root.name }}.csr.pem"
  when: root_ca_private_key.changed or not(root_ca_cert_file.stat.exists)
  register: root_ca_csr_file
- name: generate root CA cert
  shell: "openssl ca -selfsign -config {{ cert_authorities.root.path }}/openssl.cnf -in {{ cert_authorities.root.path }}/requests/{{ cert_authorities.root.name }}.csr.pem -out {{ cert_authorities.root.path }}/certs/{{ cert_authorities.root.name }}.crt -extensions root_ca_ext -passin pass:{{ cert_authorities.root.ca_key_passphrase }} -batch"
  args:
    creates: "{{ cert_authorities.root.path }}/certs/{{ cert_authorities.root.name }}.crt"
  when: root_ca_csr_file
  register: root_ca_cert_file
- name: generate root ca crl
  shell: "openssl ca -gencrl -config {{ cert_authorities.root.path }}/openssl.cnf -out {{ cert_authorities.root.path }}/crl/{{ cert_authorities.root.name }}.crl.pem -passin pass:{{ cert_authorities.root.ca_key_passphrase }} -batch"
  args:
    creates: "{{ cert_authorities.root.path }}/crl/{{ cert_authorities.root.name }}.crl.pem"



- name: create servers CA key
  openssl_privatekey:
    cipher: "{{ cert_authorities.servers.ca_key_cipher }}"
    passphrase: "{{ cert_authorities.servers.ca_key_passphrase }}"
    group: root
    owner: root
    mode: 0600
    path: "{{ cert_authorities.servers.path }}/private/{{ cert_authorities.servers.name }}.pem"
    size: 4096
    state: present
    type: RSA
  register: servers_ca_private_key

- name: initialize servers CA index
  file:
    state: touch
    path: "{{ cert_authorities.servers.path }}/index.txt"
    owner: root
    group: root
    mode: 0600
  when: servers_ca_private_key.changed
- name: initialize servers CA serial counter
  template:
    dest: "{{ cert_authorities.servers.path }}/serial"
    owner: root
    group: root
    mode: 0600
    src: "../templates/pki/serial"
  when: servers_ca_private_key.changed
- name: initialize servers CA crlnumber
  template:
    dest: "{{ cert_authorities.servers.path }}/crlnumber"
    owner: root
    group: root
    mode: 0600
    src: "../templates/pki/crlnumber"
  when: servers_ca_private_key.changed
- name: configure servers CA openssl
  template:
    dest: "{{ cert_authorities.servers.path }}/openssl.cnf"
    owner: root
    group: root
    mode: 0600
    src: "../templates/pki/serversca_openssl.cnf.j2"
- name: check servers CA cacert existence
  stat:
    path: "{{ cert_authorities.servers.path }}/certs/{{ cert_authorities.servers.name }}.crt"
  register: servers_ca_cert_file
- name: generate servers CA cert request
  shell: "openssl req -new -config {{ cert_authorities.servers.path }}/openssl.cnf -out {{ cert_authorities.servers.path }}/requests/{{ cert_authorities.servers.name }}.csr.pem -key {{ cert_authorities.servers.path }}/private/{{ cert_authorities.servers.name }}.pem -passin pass:{{ cert_authorities.servers.ca_key_passphrase }} -batch"
  args:
    creates: "{{ cert_authorities.servers.path }}/requests/{{ cert_authorities.servers.name }}.csr.pem"
  when: servers_ca_private_key.changed or not(servers_ca_cert_file.stat.exists)
  register: servers_ca_csr_file
- name: generate servers CA cert
  shell: "openssl ca -config {{ cert_authorities.root.path }}/openssl.cnf -in {{ cert_authorities.servers.path }}/requests/{{ cert_authorities.servers.name }}.csr.pem -out {{ cert_authorities.servers.path }}/certs/{{ cert_authorities.servers.name }}.crt -extensions signing_ca_ext -passin pass:{{ cert_authorities.root.ca_key_passphrase }} -batch"
  args:
    creates: "{{ cert_authorities.servers.path }}/certs/{{ cert_authorities.servers.name }}.crt"
  when: servers_ca_csr_file
  register: servers_ca_cert_file
- name: create servers ca cert chain
  shell: "openssl crl2pkcs7 -nocrl -certfile {{ cert_authorities.servers.path }}/certs/{{ cert_authorities.servers.name }}.crt -certfile {{ cert_authorities.root.path }}/certs/{{ cert_authorities.root.name }}.crt -out {{ cert_authorities.servers.path }}/{{ cert_authorities.servers.name }}-chain.p7b"
  when: servers_ca_cert_file or root_ca_cert_file
- name: generate servers ca crl
  shell: "openssl ca -gencrl -config {{ cert_authorities.servers.path }}/openssl.cnf -out {{ cert_authorities.servers.path }}/crl/{{ cert_authorities.servers.name }}.crl.pem -passin pass:{{ cert_authorities.servers.ca_key_passphrase }} -batch"
  args:
    creates: "{{ cert_authorities.servers.path }}/crl/{{ cert_authorities.servers.name }}.crl.pem"

- name: create users CA key
  openssl_privatekey:
    cipher: "{{ cert_authorities.users.ca_key_cipher }}"
    passphrase: "{{ cert_authorities.users.ca_key_passphrase }}"
    group: root
    owner: root
    mode: 0600
    path: "{{ cert_authorities.users.path }}/private/{{ cert_authorities.users.name }}.pem"
    size: 4096
    state: present
    type: RSA
  register: users_ca_private_key

- name: initialize users CA index
  file:
    state: touch
    path: "{{ cert_authorities.users.path }}/index.txt"
    owner: root
    group: root
    mode: 0600
  when: users_ca_private_key.changed
- name: initialize users CA serial counter
  template:
    dest: "{{ cert_authorities.users.path }}/serial"
    owner: root
    group: root
    mode: 0600
    src: "../templates/pki/serial"
  when: users_ca_private_key.changed
- name: initialize users CA crlnumber
  template:
    dest: "{{ cert_authorities.users.path }}/crlnumber"
    owner: root
    group: root
    mode: 0600
    src: "../templates/pki/crlnumber"
  when: users_ca_private_key.changed
- name: configure users CA openssl
  template:
    dest: "{{ cert_authorities.users.path }}/openssl.cnf"
    owner: root
    group: root
    mode: 0600
    src: "../templates/pki/usersca_openssl.cnf.j2"
- name: check users CA cacert existence
  stat:
    path: "{{ cert_authorities.users.path }}/certs/{{ cert_authorities.users.name }}.crt"
  register: users_ca_cert_file
- name: generate users CA cert request
  shell: "openssl req -new -config {{ cert_authorities.users.path }}/openssl.cnf -out {{ cert_authorities.users.path }}/requests/{{ cert_authorities.users.name }}.csr.pem -key {{ cert_authorities.users.path }}/private/{{ cert_authorities.users.name }}.pem -passin pass:{{ cert_authorities.users.ca_key_passphrase }} -batch"
  args:
    creates: "{{ cert_authorities.users.path }}/requests/{{ cert_authorities.users.name }}.csr.pem"
  when: users_ca_private_key.changed or not(users_ca_cert_file.stat.exists)
  register: users_ca_csr_file
- name: generate users CA cert
  shell: "openssl ca -config {{ cert_authorities.root.path }}/openssl.cnf -in {{ cert_authorities.users.path }}/requests/{{ cert_authorities.users.name }}.csr.pem -out {{ cert_authorities.users.path }}/certs/{{ cert_authorities.users.name }}.crt -extensions signing_ca_ext -passin pass:{{ cert_authorities.root.ca_key_passphrase }} -batch"
  args:
    creates: "{{ cert_authorities.users.path }}/certs/{{ cert_authorities.users.name }}.crt"
  when: users_ca_csr_file
  register: users_ca_cert_file
- name: create users ca cert chain
  shell: "openssl crl2pkcs7 -nocrl -certfile {{ cert_authorities.users.path }}/certs/{{ cert_authorities.users.name }}.crt -certfile {{ cert_authorities.root.path }}/certs/{{ cert_authorities.root.name }}.crt -out {{ cert_authorities.users.path }}/{{ cert_authorities.users.name }}-chain.p7b"
  when: users_ca_cert_file or root_ca_cert_file
- name: generate users ca crl
  shell: "openssl ca -gencrl -config {{ cert_authorities.users.path }}/openssl.cnf -out {{ cert_authorities.users.path }}/crl/{{ cert_authorities.users.name }}.crl.pem -passin pass:{{ cert_authorities.users.ca_key_passphrase }} -batch"
  args:
    creates: "{{ cert_authorities.users.path }}/crl/{{ cert_authorities.users.name }}.crl.pem"


- name: deploy tls client request openssl config file
  template:
    dest: "{{ cert_authorities.servers.path }}/csr_tls_clients.cnf"
    owner: root
    group: root
    mode: 0600
    src: "../templates/pki/tls_client.cnf.j2"
- name: deploy tls server request openssl config file
  template:
    dest: "{{ cert_authorities.servers.path }}/csr_tls_servers.cnf"
    owner: root
    group: root
    mode: 0600
    src: "../templates/pki/tls_server.cnf.j2"
- name: deploy email client request openssl config file
  template:
    dest: "{{ cert_authorities.users.path }}/csr_email.cnf"
    owner: root
    group: root
    mode: 0600
    src: "../templates/pki/email.cnf.j2"

- name: deploy csr script for tls server
  template:
    dest: "{{ cert_authorities.servers.path }}/bin/csr_tls_server.sh"
    owner: root
    group: root
    mode: 0700
    src: "../templates/pki/csr_tls_server.sh.j2"
- name: deploy csr script for tls client
  template:
    dest: "{{ cert_authorities.servers.path }}/bin/csr_tls_client.sh"
    owner: root
    group: root
    mode: 0700
    src: "../templates/pki/csr_tls_client.sh.j2"
- name: deploy csr script for email clients
  template:
    dest: "{{ cert_authorities.users.path }}/bin/csr_email_client.sh"
    owner: root
    group: root
    mode: 0700
    src: "../templates/pki/csr_email_client.sh.j2"


- name: deploy sign script for tls servers
  template:
    dest: "{{ cert_authorities.servers.path }}/bin/sign_tls_server.sh"
    owner: root
    group: root
    mode: 0700
    src: "../templates/pki/sign_tls_server.sh.j2"
- name: deploy sign script for tls clients
  template:
    dest: "{{ cert_authorities.servers.path }}/bin/sign_tls_client.sh"
    owner: root
    group: root
    mode: 0700
    src: "../templates/pki/sign_tls_client.sh.j2"
- name: deploy sign script for email clients
  template:
    dest: "{{ cert_authorities.users.path }}/bin/sign_email_client.sh"
    owner: root
    group: root
    mode: 0700
    src: "../templates/pki/sign_email_client.sh.j2"

- name: "deploy gencrl script for {{ cert_authorities.root.name }}"
  template:
    dest: "{{ cert_authorities.root.path }}/bin/gencrl.sh"
    owner: root
    group: root
    mode: 0700
    src: "../templates/pki/root_gencrl.sh.j2"
- name: "deploy gencrl script for {{ cert_authorities.servers.name }}"
  template:
    dest: "{{ cert_authorities.servers.path }}/bin/gencrl.sh"
    owner: root
    group: root
    mode: 0700
    src: "../templates/pki/servers_gencrl.sh.j2"
- name: "deploy gencrl script for {{ cert_authorities.users.name }}"
  template:
    dest: "{{ cert_authorities.users.path }}/bin/gencrl.sh"
    owner: root
    group: root
    mode: 0700
    src: "../templates/pki/users_gencrl.sh.j2"

- name: "deploy revoke script for {{ cert_authorities.root.name }}"
  template:
    dest: "{{ cert_authorities.root.path }}/bin/revoke.sh"
    owner: root
    group: root
    mode: 0700
    src: "../templates/pki/root_revoke.sh.j2"
- name: "deploy revoke script for {{ cert_authorities.servers.name }}"
  template:
    dest: "{{ cert_authorities.servers.path }}/bin/revoke.sh"
    owner: root
    group: root
    mode: 0700
    src: "../templates/pki/servers_revoke.sh.j2"
- name: "deploy revoke script for {{ cert_authorities.users.name }}"
  template:
    dest: "{{ cert_authorities.users.path }}/bin/revoke.sh"
    owner: root
    group: root
    mode: 0700
    src: "../templates/pki/users_revoke.sh.j2"

- name: "plan hourly gencrl execution for the 3 CAs"
  cron:
    name: "{{item.name}} gencrl"
    user: root
    minute: "{{ item.index }}"
    hour: "*/4"
    job: "{{ item.path }}/bin/gencrl.sh"
  with_items:
    - index: 0
      name: "users"
      path: "{{ cert_authorities.users.path }}"
    - index: 5
      name: "servers"
      path: "{{ cert_authorities.servers.path }}"
    - index: 10
      name: "root"
      path: "{{ cert_authorities.root.path }}"
